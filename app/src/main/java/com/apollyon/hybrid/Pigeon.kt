// Autogenerated from Pigeon (v9.0.7), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.markov.flutter_pigeon_plugin

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any> {
  return listOf<Any>(
    exception.javaClass.simpleName,
    exception.toString(),
    "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
  )
}

enum class FState(val raw: Int) {
  INITIAL(0),
  LOADING(1),
  SUCCESS(2),
  FAILURE(3);

  companion object {
    fun ofRaw(raw: Int): FState? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FStateResult (
  val state: FState,
  val message: String? = null

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FStateResult {
      val state = FState.ofRaw(list[0] as Int)!!
      val message = list[1] as String?
      return FStateResult(state, message)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      state.raw,
      message,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class FMarkovToken (
  val accessToken: String,
  val refreshToken: String

) {
  companion object {
    @Suppress("UNCHECKED_CAST")
    fun fromList(list: List<Any?>): FMarkovToken {
      val accessToken = list[0] as String
      val refreshToken = list[1] as String
      return FMarkovToken(accessToken, refreshToken)
    }
  }
  fun toList(): List<Any?> {
    return listOf<Any?>(
      accessToken,
      refreshToken,
    )
  }
}

@Suppress("UNCHECKED_CAST")
private object FCNApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FMarkovToken.fromList(it)
        }
      }
      129.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FStateResult.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is FMarkovToken -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      is FStateResult -> {
        stream.write(129)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface FCNApi {
  fun getToken(token: FMarkovToken, callback: (Result<FStateResult>) -> Unit)

  companion object {
    /** The codec used by FCNApi. */
    val codec: MessageCodec<Any?> by lazy {
      FCNApiCodec
    }
    /** Sets up an instance of `FCNApi` to handle messages through the `binaryMessenger`. */
    @Suppress("UNCHECKED_CAST")
    fun setUp(binaryMessenger: BinaryMessenger, api: FCNApi?) {
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.FCNApi.getToken", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val tokenArg = args[0] as FMarkovToken
            api.getToken(tokenArg) { result: Result<FStateResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
@Suppress("UNCHECKED_CAST")
private object NCFApiCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      128.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          FMarkovToken.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is FMarkovToken -> {
        stream.write(128)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}

/** Generated class from Pigeon that represents Flutter messages that can be called from Kotlin. */
@Suppress("UNCHECKED_CAST")
class NCFApi(private val binaryMessenger: BinaryMessenger) {
  companion object {
    /** The codec used by NCFApi. */
    val codec: MessageCodec<Any?> by lazy {
      NCFApiCodec
    }
  }
  fun setToken(tokenArg: FMarkovToken, callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NCFApi.setToken", codec)
    channel.send(listOf(tokenArg)) {
      callback()
    }
  }
  fun resetData(callback: () -> Unit) {
    val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.NCFApi.resetData", codec)
    channel.send(null) {
      callback()
    }
  }
}
